{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["CForm","props","updateMainState","name","value","onUpdateStateValue","handleFormChange","event","target","setState","replaceMissingChars","cardNumber","cardNumberTmp","split","cardNumberArr","maskedCardNumber","forEach","val","index","push","join","onCardNumberChange","replace","test","trimRight","onCvvFocus","onCvvBlur","onQiClick","onCriditClick","currentYear","Date","getFullYear","state","fields","email","message","errors","disabled","showMyComponentcridit","showMyComponent","cardMonth","cardYear","monthsArr","Array","from","x","i","month","yearsArr","this","formIsValid","length","match","alert","lastAtPos","lastIndexOf","lastDotPos","indexOf","field","e","preventDefault","handleValidation","console","log","parse","setCustomValidity","cardNumberRef","current","selectionStart","prevProps","prevState","cursorIdx","node","cardNum","prevCardNum","selectionEnd","cardHolderRef","cardDateRef","cardCvvRef","onCardInputFocus","onCardInputBlur","onSubmit","handleSubmit","bind","method","className","id","children","type","for","src","alt","style","display","htmlFor","autoComplete","onChange","onInput","handleChange","maxLength","ref","onFocus","onBlur","color","map","key","class","placeholder","refs","aria-describedby","rows","Component","CARDS","visa","mastercard","qi","Card","cardType","re","number","Object","entries","card","pattern","RegExp","cardBackgroundName","random","Math","floor","removeEmptySpaces","shouldMaskNumber","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","backgroundImgname","counter","currentFocusedElm","cardHolder","cardCvv","isCardFlipped","onCardElementClick","cardHolderArr","maskCardNumber","process","onClick","TransitionGroup","component","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","MainScreen","initialState","useState","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"oUA2oBeA,E,YA/nBX,WAAYC,GAAQ,IAAD,uBACf,4CAAMA,KA0JVC,gBAAkB,SAACC,EAAMC,GACrB,EAAKH,MAAMI,mBAAmB,CAC1BF,OACAC,WA9JW,EAkKnBE,iBAAmB,SAAAC,GAAU,IAAD,EACAA,EAAMC,OAAtBL,EADgB,EAChBA,KAAMC,EADU,EACVA,MAEd,EAAKK,SAAL,eAAiBN,EAAOC,IACxB,EAAKF,gBAAgBC,EAAMC,IAtKZ,EAyKnBM,oBAAsB,SAAAC,GAClB,IAAIC,EAAgB,sBACpBA,EAAgBA,EAAcC,MAAM,IACpC,IAAIC,EAAgBH,EAAWE,MAAM,IAEjCE,EAAmB,GAOvB,OANAH,EAAcI,SAAQ,SAACC,EAAKC,GACxBJ,EAAcI,GACRH,EAAiBI,KAAKL,EAAcI,IACpCH,EAAiBI,KAAKF,MAGzBF,EAAiBK,KAAK,KArLd,EAgMnBC,mBAAqB,SAAAd,GAAU,IAAD,EACJA,EAAMC,OAAtBJ,EADoB,EACpBA,MAAOD,EADa,EACbA,KACTQ,EAAaP,EACjBA,EAAQA,EAAMkB,QAAQ,MAAO,IACzB,kBAAkBC,KAAKnB,GACvBO,EAAaP,EACRkB,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UACzB,+BAA+BC,KAAKnB,GAE3CO,EAAaP,EACRkB,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UACzB,aAAaC,KAAKnB,KAEzBO,EAAaP,EACRkB,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UAC3BA,QAAQ,0BAA2B,cAG5C,EAAKb,SAAL,eAAiBN,EAAOQ,EAAWa,cACnC,EAAKtB,gBAAgBC,EAAMQ,IAtNZ,EAyNnBc,WAAa,SAAAlB,GACT,EAAKL,gBAAgB,iBAAiB,IA1NvB,EA6NnBwB,UAAY,SAAAnB,GACR,EAAKL,gBAAgB,iBAAiB,IA9NvB,EAgOpByB,UAAY,SAAApB,GACP,EAAKL,gBAAgB,mBAAmB,IAjOzB,EAmOnB0B,cAAgB,SAAArB,GACZ,EAAKL,gBAAgB,yBAAyB,IAjO9C,IAAM2B,GAAc,IAAIC,MAAOC,cAHhB,OAIf,EAAKC,MAAQ,CACTC,OAAQ,CACJtB,WAAY,GACZR,KAAK,GACL+B,MAAO,GACPC,QAAS,IAEXC,OAAQ,GACRC,UAAW,EACjBC,uBAAsB,EACpBC,iBAAgB,EACd5B,WAAY,GACZ6B,UAAW,GACXC,SAAU,GACVC,UAAWC,MAAMC,KAAK,IAAID,MAAM,KAAK,SAACE,EAAGC,GACrC,IAAMC,EAAQD,EAAI,EAClB,OAAOC,GAAS,EAAI,IAAMA,EAAQA,KAEtCC,SAAUL,MAAMC,KAAK,IAAID,MAAM,IAAI,SAACE,EAAGC,GAAJ,OAAUjB,EAAciB,MAtBhD,E,gFA0BTG,KAAKjB,MAAMrB,WAAjB,IACIsB,EAASgB,KAAKjB,MAAMC,OACpBG,EAAS,GACTc,GAAc,EA6FlB,GA3FIjB,EAAM,OACPiB,GAAc,EACdd,EAAM,KAAW,8BAGS,qBAAnBH,EAAM,OAAgD,KAAnBA,EAAM,OAE3CA,EAAM,KAASkB,OAAQ,KACzBD,GAAc,EACdd,EAAM,KAAW,sLAIhBH,EAAM,KAASmB,MAAM,cACxBF,GAAc,EACdd,EAAM,KAAW,sLAIhBH,EAAM,KAASmB,MAAM,aAAgBnB,EAAM,KAASkB,OAAQ,KAC7DD,GAAc,EACdd,EAAM,KAAW,sMAKzBH,EAAM,aACNoB,MAAM,MACCH,GAAc,EACdd,EAAM,WAAiB,8BAGS,qBAAzBH,EAAM,aAA4D,KAAzBA,EAAM,aACnDoB,MAAM,MAEJpB,EAAM,WAAekB,OAAQ,KAC/BD,GAAc,EACdd,EAAM,WAAiB,sLAItBH,EAAM,WAAemB,MAAM,cAC9BF,GAAc,EACdd,EAAM,WAAiB,sLAItBH,EAAM,WAAemB,MAAM,aAAgBnB,EAAM,WAAekB,OAAQ,KACzED,GAAc,EACdd,EAAM,WAAiB,wMAqCvBH,EAAM,QACPiB,GAAc,EACdd,EAAM,MAAY,+BAGS,qBAApBH,EAAM,QAAkD,KAApBA,EAAM,MAAoB,CACrE,IAAIqB,EAAYrB,EAAM,MAAUsB,YAAY,KACxCC,EAAavB,EAAM,MAAUsB,YAAY,KAEvCD,EAAYE,GAAcF,EAAY,IAAwC,IAAnCrB,EAAM,MAAUwB,QAAQ,OAAgBD,EAAa,GAAMvB,EAAM,MAAUkB,OAASK,EAAc,IAChJN,GAAc,EACdd,EAAM,MAAY,sBAUzB,OANIH,EAAM,UACPiB,GAAc,EACdd,EAAM,QAAc,kCAGvBa,KAAKxC,SAAS,CAAC2B,OAAQA,IAChBc,I,mCAGEQ,EAAOC,GAChB,IAAI1B,EAASgB,KAAKjB,MAAMC,OACxBA,EAAOyB,GAASC,EAAEnD,OAAOJ,MACzB6C,KAAKxC,SAAS,CAACwB,a,mCAGN0B,GACTA,EAAEC,iBACCX,KAAKY,mBACJC,QAAQC,IAAI,yBAEZD,QAAQC,IAAI,uB,+BA+BVJ,GACM,IAAI7B,KAAKA,KAAKkC,MAAML,EAAEnD,OAAOJ,QAKtCuD,EAAEnD,OAAOyD,kBAAkB,S,gDA2C/B,OAAOhB,KAAKhD,MAAMiE,cAAcC,QAAQC,iB,yCAGvBC,EAAWC,EAAWC,GACvC,IAAMC,EAAOvB,KAAKhD,MAAMiE,cAAcC,QAClBM,EAAYxB,KAAKjB,MAA7BrB,WACY+D,EAAgBJ,EAA5B3D,WAEN8D,EAAQtB,OAASuB,EAAYvB,QACF,MAA3BsB,EAAQF,EAAY,GAEpBA,GAAa,EAC2B,MAA/BG,EAAYH,EAAY,KACjCA,GAAa,GAEfC,EAAKJ,eAAiBI,EAAKG,aAAeJ,I,+BAGlC,IAAD,eAEgDtB,KAAKjB,MAAlDQ,EAFH,EAEGA,UAAWC,EAFd,EAEcA,SAAUC,EAFxB,EAEwBA,UAAWM,EAFnC,EAEmCA,SAFnC,EAUDC,KAAKhD,MANLiE,EAJC,EAIDA,cACAU,EALC,EAKDA,cACAC,EANC,EAMDA,YACAC,EAPC,EAODA,WACAC,EARC,EAQDA,iBACAC,EATC,EASDA,gBAEJ,OAKI,0BAAMC,SAAUhC,KAAKiC,aAAaC,KAAKlC,MAAOmC,OAAO,QACrD,yBAAKC,UAAU,aAEX,yBAAKC,GAAG,OAAMD,UAAU,aAAapC,KAAKhD,MAAMsF,UAChD,yBAAKF,UAAU,mBAAmBC,GAAG,oBACrC,6CAGA,yEAGhB,yBAAKD,UAAU,eAGf,8BAAOG,KAAK,QAAQF,GAAG,UAAvB,qBAAsC,SAAtC,qBAAmD,iBAAnD,mBAAsE,kBAAtE,sBAA6F,WAA7F,yBACS,WAEL,EAAK7E,SAAS,CAAE8B,iBAAiB,IACjC,EAAKrC,gBAAgB,mBAAmB,GACxC,EAAKO,SAAS,CAAE6B,uBAAuB,IACvC,EAAKpC,gBAAgB,mBAAmB,GACxC,EAAKA,gBAAgB,yBAAyB,MAPlD,IAYqC,2BAAOmF,UAAU,mBAAmBI,IAAI,kBAAxC,cAE7B,+BAIkB,yBAAKJ,UAAU,QACf,yBAAKA,UAAU,KACzCK,IAA8B,YACQC,IAAI,KAE1C,yBAAKN,UAAU,KACoBK,IAA8B,YAC3BC,IAAI,OAcxC,yBAAOL,GAAG,MAAMM,MAAO3C,KAAKjB,MAAMO,gBAAkB,GAAK,CAAEsD,QAAS,SAElD,yBAAKR,UAAU,cACX,2BACIS,QAAQ,aACRT,UAAU,qBAFd,eAWA,2BACPC,GAAG,aACQE,KAAK,MACLrF,KAAK,aACLkF,UAAU,oBACVU,aAAa,MACbC,SAAU/C,KAAK5B,mBAGnB4E,QAAShD,KAAKiD,aAAaf,KAAKlC,KAAM,cAElCkD,UAAU,KACVC,IAAKlC,EAELmC,QAAS,SAAA1C,GAAC,OAAIoB,EAAiBpB,EAAG,eAClC2C,OAAQtB,EACR5E,MAAO6C,KAAKjB,MAAMrB,aAElB,0BAAMiF,MAAO,CAACW,MAAO,QAAStD,KAAKjB,MAAMI,OAAX,OAGtC,yBAAKiD,UAAU,cACX,2BAAOS,QAAQ,WAAWT,UAAU,qBAApC,gBAGA,2BACGC,GAAG,WACFE,KAAK,OACLH,UAAU,oBACVU,aAAa,MACb5F,KAAK,aACL6F,SAAU/C,KAAK3C,iBACf8F,IAAKxB,EACLyB,QAAS,SAAA1C,GAAC,OAAIoB,EAAiBpB,EAAG,eAClC2C,OAAQtB,KAIhB,yBAAKK,UAAU,kBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,oBACX,2BACIS,QAAQ,YACRT,UAAU,qBAFd,mBAMA,4BACIA,UAAU,4BACVjF,MAAOoC,EACPrC,KAAK,YACL6F,SAAU/C,KAAK3C,iBACf8F,IAAKvB,EACLwB,QAAS,SAAA1C,GAAC,OACNoB,EAAiBpB,EAAG,aAExB2C,OAAQtB,GAER,4BAAQ5E,MAAM,GAAGiC,UAAQ,GAAzB,SAICK,EAAU8D,KAAI,SAACvF,EAAKC,GAAN,OACX,4BAAQuF,IAAKvF,EAAOd,MAAOa,GACtBA,OAIb,4BACId,KAAK,WACLkF,UAAU,4BACVjF,MAAOqC,EACPuD,SAAU/C,KAAK3C,iBACf+F,QAAS,SAAA1C,GAAC,OACNoB,EAAiBpB,EAAG,aAExB2C,OAAQtB,GAER,4BAAQ5E,MAAM,GAAGiC,UAAQ,GAAzB,QAICW,EAASwD,KAAI,SAACvF,EAAKC,GAAN,OACV,4BAAQuF,IAAKvF,EAAOd,MAAOa,GACtBA,SAMrB,yBAAKoE,UAAU,uBACX,yBAAKA,UAAU,cACX,2BACIS,QAAQ,UACRT,UAAU,qBAFd,OAOA,2BACEC,GAAG,MACDE,KAAK,MACLH,UAAU,oBACVc,UAAU,IACVJ,aAAa,MACb5F,KAAK,UACL6F,SAAU/C,KAAK3C,iBACf+F,QAASpD,KAAKxB,WACd6E,OAAQrD,KAAKvB,UACb0E,IAAKtB,QAMrB,yBAAKO,UAAU,cAAcC,GAAG,MAOpD,8BAIAA,GAAG,SAASE,KAAK,QAASrF,KAAK,gBAAgBkF,UAAU,SAJzD,mBAIoE,kBAJpE,sBAI2F,WAJ3F,oBAM0C,IAN1C,yBAO+C,WAC/C,EAAK5E,SAAS,CAAE8B,iBAAiB,IACjC,EAAKrC,gBAAgB,mBAAmB,GACxC,EAAKO,SAAS,CAAE6B,uBAAuB,IACvC,EAAKpC,gBAAgB,yBAAyB,GAEN,EAAKA,gBAAgB,iBAAiB,MAb9E,IAgBE,2BAAOwG,MAAM,mBAAmBjB,IAAI,kBAApC,UAIM,+BAIkB,yBAAKJ,UAAU,SACf,yBAAKA,UAAU,MACzCK,IAA8B,WACQC,IAAI,OAmBxC,yBAAKL,GAAG,SAASM,MAAO3C,KAAKjB,MAAMM,sBAAwB,GAAK,CAAEuD,QAAS,SAIrD,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,cACX,2BACIS,QAAQ,UACRT,UAAU,qBAFd,eAMA,8BAAOG,KAAK,OAAOmB,YAAY,aAC7BrB,GAAG,SADL,qBAEO,OAFP,0BAGY,0BAHZ,6BAKe,OALf,qBAMO,WANP,0BAOYrC,KAAK3C,iBACb2C,KAAKiD,aAAaf,KAAKlC,KAAM,UARjC,wBASWA,KAAKxB,YAThB,uBAUUwB,KAAKvB,WAVf,oBAWOoD,GAXP,sBAcO7B,KAAKjB,MAAMC,OAAX,MAdP,IAehB,0BAAM2D,MAAO,CAACW,MAAO,QAAStD,KAAKjB,MAAMI,OAAX,QAmBtB,0BAAM6C,SAAUhC,KAAKiC,aAAaC,KAAKlC,MAAOmC,OAAO,QACnE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACX,2BAAOS,QAAQ,QAAf,UAON,yBAAKT,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOS,QAAQ,sBAAf,kBAEF,yBAAKT,UAAU,UACX,2BAAOG,KAAK,QAAQmB,YAAY,cAAcC,KAAK,QAAQC,mBAAiB,YAAYb,SAAU/C,KAAKiD,aAAaf,KAAKlC,KAAM,SAAU7C,MAAO6C,KAAKjB,MAAMC,OAAX,QAChJ,0BAAM2D,MAAO,CAACW,MAAO,QAAStD,KAAKjB,MAAMI,OAAX,SAGpC,yBAAKiD,UAAU,OACb,yBAAKA,UAAU,UACX,2BAAOS,QAAQ,WAAf,YAEJ,yBAAKT,UAAU,UACX,8BAAUG,KAAK,OAAOmB,YAAY,gBAAgBG,KAAK,IAAIF,KAAK,UAAUZ,SAAU/C,KAAKiD,aAAaf,KAAKlC,KAAM,WAAY7C,MAAO6C,KAAKjB,MAAMC,OAAX,UACpI,0BAAM2D,MAAO,CAACW,MAAO,QAAStD,KAAKjB,MAAMI,OAAX,WAGpC,yBAAKiD,UAAU,OACf,4BAAQG,KAAK,SAASH,UAAU,iCAAiChD,SAAUY,KAAKjB,MAAMK,UAAWY,KAAKjB,MAAMK,SAAW,aAAe,UAQxH,yBAAKgD,UAAU,uBACX,yBAAKA,UAAU,cACX,2BACIS,QAAQ,UACRT,UAAU,qBAFd,OAOA,2BACEC,GAAG,MACDE,KAAK,MACLH,UAAU,oBACVc,UAAU,IACVJ,aAAa,MACb5F,KAAK,UACL6F,SAAU/C,KAAK3C,iBACf+F,QAASpD,KAAKxB,WACd6E,OAAQrD,KAAKvB,UACb0E,IAAKtB,c,GA5lBrBiC,a,wBCHdC,G,MAAQ,CACVC,KAAM,KAENC,WAAY,UAEZC,GAAI,QAoTOC,E,YA7SX,aAAe,IAAD,uBACV,+CAUJC,SAAW,WAGP,IAFA,IACIC,EADEC,EAAS,EAAKtH,MAAMU,WAE1B,MAA8B6G,OAAOC,QAAQT,GAA7C,eAAqD,CAAC,IAAD,0BAAzCU,EAAyC,KAAnCC,EAAmC,KAEjD,GADAL,EAAK,IAAIM,OAAOD,GACQ,MAApBJ,EAAOnE,MAAMkE,GACb,OAAOI,EAIf,MAAO,YArBG,EAwBdG,mBAAqB,WACjB,IAAIC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKD,SAAgB,GAC7C,MAAM,GAAN,OAAUA,EAAV,UA1BU,EA6BdG,kBAAoB,SAAAtH,GAChB,OAAOA,EAAWW,QAAQ,OAAQ,KA9BxB,EAiCd4G,iBAAmB,SAACvH,EAAYO,GAC5B,OAA0B,KAAtBP,EAAWwC,OACJjC,EAAQ,GAAKA,EAAQ,GAErBA,EAAQ,GAAKA,EAAQ,IArCtB,EAyCdiH,oBAAsB,SAAAC,GAAO,OAAIA,EAC3B,CACEC,MAAM,GAAD,OAAKD,EAAQE,YAAb,MACLC,OAAO,GAAD,OAAKH,EAAQI,aAAb,MACNC,UAAU,cAAD,OAAgBL,EAAQM,WAAxB,0BAAoDN,EAAQO,UAA5D,QAEX,MA5CF,IAAMC,EAAoB,EAAKf,qBAHrB,OAIV,EAAK7F,MAAQ,CACT4D,MAAO,GACPiD,QAAS,EACTD,kBAAmBA,GAPb,E,gFAiDKvE,GAAY,IACnByE,EAAsB7F,KAAKhD,MAA3B6I,kBACR,GACIA,GACAA,IAAsBzE,EAAUyE,kBAClC,CACE,IAAMlD,EAAQ3C,KAAKkF,oBAAoBW,GACvC7F,KAAKxC,SAAS,CAAEmF,a,qCAITjF,GACX,IAAIG,EAAgBH,EAAWE,MAAM,IASrC,OARAC,EAAcE,SAAQ,SAACC,EAAKC,GACpBA,EAAQ,GAAKA,EAAQ,IACQ,MAAzBJ,EAAcI,KACdJ,EAAcI,GAAS,QAK5BJ,I,+BAGD,IAAD,EAaDmC,KAAKhD,MAXL8I,EAFC,EAEDA,WACApI,EAHC,EAGDA,WACA6B,EAJC,EAIDA,UACAC,EALC,EAKDA,SACAuG,EANC,EAMDA,QACAC,EAPC,EAODA,cACAH,EARC,EAQDA,kBACAI,EATC,EASDA,mBACAhF,EAVC,EAUDA,cACAU,EAXC,EAWDA,cACAC,EAZC,EAYDA,YAGEsE,EAAgBJ,EAAWlI,MAAM,IACjCC,EAAgBmC,KAAKmG,eAAezI,GAG1C,OAFAqI,EAAUA,EAAQnI,MAAM,IAIpB,yBAAKwE,UAAW,cAAgB4D,EAAgB,UAAY,KACxD,yBAAK5D,UAAU,0BACX,yBACIA,UAAS,2BACLyD,EAAiB,cAErBlD,MAAO3C,KAAKjB,MAAM4D,QAEtB,yBAAKP,UAAU,oBACX,yBACIM,IAAI,GACJD,IACI2D,GAAA,2BACoBpG,KAAKjB,MAAM4G,mBAEnCvD,UAAU,mBAIlB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,kBACX,yBACIK,IAA8B,YAC9BC,IAAI,GACJN,UAAU,oBAEd,yBAAKA,UAAU,mBACX,yBACIM,IAAK1C,KAAKoE,WACV3B,IACI2D,GAAA,qBACcpG,KAAKoE,WADnB,QAGJhC,UAAU,yBAKtB,2BACIA,UAAU,oBACVe,IAAKlC,EACLoF,QAAS,kBAAMJ,EAAmB,gBAElC,kBAACK,EAAA,EAAD,CACIlE,UAAU,gBACVmE,UAAU,OAET7I,EACGG,EAAc0F,KAAI,SAACvF,EAAKC,GAAN,OACd,kBAACuI,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTlD,IAAKvF,GAEL,yBAAKmE,UAAU,yBACVpE,OAKb,kBAACwI,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,yBAAKtE,UAAU,yBAAf,QAOhB,yBAAKA,UAAU,sBACX,2BACIA,UAAU,kBACViE,QAAS,kBAAMJ,EAAmB,eAClC9C,IAAKxB,GAEL,yBAAKS,UAAU,qBAAf,eAGA,yBAAKA,UAAU,mBACX,kBAACkE,EAAA,EAAD,CACIlE,UAAU,gBACVmE,UAAU,OAEM,cAAfT,EACG,kBAACU,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,2CAGJR,EAAc3C,KAAI,SAACvF,EAAKC,GAAN,OACd,kBAACuI,EAAA,EAAD,CACIE,QAAS,IACTD,WAAW,mBACXjD,IAAKvF,GAEL,0BAAMmE,UAAU,uBACXpE,UAQ7B,yBACIoE,UAAU,kBACViE,QAAS,kBAAMJ,EAAmB,aAClC9C,IAAKvB,GAEL,2BAAOQ,UAAU,wBAAjB,WAGA,2BAAOA,UAAU,uBACb,kBAACuE,EAAA,EAAD,CAAkBC,UAAA,GACZrH,EASE,kBAACiH,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTlD,IAAKjE,GAEL,8BAAOA,IAbX,kBAACiH,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTlD,IAAKjE,GAEL,uCAhBpB,IA8BI,2BACIsD,QAAQ,WACRT,UAAU,uBAEV,kBAACuE,EAAA,EAAD,CAAkBE,UAAA,GACZrH,EASE,kBAACgH,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTlD,IAAKhE,GAEL,8BACKA,EACIsH,WACAC,QAAQ,KAhBrB,kBAACP,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTlD,IAAKhE,GAEL,2CAsBhC,yBAAK4C,UAAU,yBACX,yBAAKA,UAAU,oBACX,yBACIM,IAAI,GACJD,IACI2D,GAAA,2BACoBpG,KAAKjB,MAAM4G,mBAEnCvD,UAAU,mBAGlB,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBAAf,OACA,yBAAKA,UAAU,sBACV2D,EAAQxC,KAAI,SAACvF,EAAKC,GAAN,OACT,0BAAMuF,IAAKvF,GAAX,SAGR,yBAAKmE,UAAU,mBACX,yBACIM,IAAI,YACJD,IAEI,sBAEJL,UAAU,+B,GApSvB0B,a,yjBCfnB,IAwGekD,EAlGI,WACf,IAAMC,EAAe,CACjBvJ,WARc,sBASdoI,WARsB,YAStBvG,UARiB,GASjBC,SARgB,GAShBuG,QARe,GASfC,eAAe,EACfH,kBAAmB,MARF,EAUKqB,mBAASD,GAVd,mBAUdlI,EAVc,KAUPvB,EAVO,KAoBjBE,EAMAqB,EANArB,WACAoI,EAKA/G,EALA+G,WACAvG,EAIAR,EAJAQ,UACAC,EAGAT,EAHAS,SACAuG,EAEAhH,EAFAgH,QACAC,EACAjH,EADAiH,cAEEH,EAAsB9G,EAAtB8G,kBAGFsB,EAAmB,CACnBzJ,WAAY0J,mBACZtB,WAAYsB,mBACZC,SAAUD,mBACVrB,QAASqB,oBAOTE,EAAsB,SAAA9D,GACtB2D,EAAiB3D,GAAKtC,QAAQqG,SAI9BC,EAAkB,CAClB9J,WAAY,KACZoI,WAAY,KACZuB,SAAU,MAiBd,OACI,yBAAKjF,UAAU,WACX,kBAAC,EAAD,CACIhF,mBAzDa,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BK,EAAS,EAAD,GACDuB,EADC,eAEH7B,EAAOC,GAAS8J,EAAa/J,OAuD1B+D,cAAekG,EAAiBzJ,WAChCiE,cAAewF,EAAiBrB,WAChClE,YAAauF,EAAiBE,SAC9BvF,iBArBe,SAAC2F,EAAQC,GAChClK,EAAS,EAAD,GACDuB,EADC,CAEJ8G,kBAAmB2B,EAAgBE,OAmB/B3F,gBAfU,SAAAzE,GAClBE,EAAS,EAAD,GACDuB,EADC,CAEJ8G,kBAAmB,UAcf,kBAAC,EAAD,CACInI,WAAYA,EACZoI,WAAYA,EACZvG,UAAWA,EACXC,SAAUA,EACVuG,QAASA,EACTC,cAAeA,EACfH,kBAAmBA,EACnBI,mBA/CS,SAAAzC,GACrB8D,EAAoB9D,IA+CRvC,cAAe,SAAAM,GAAI,OACdiG,EAAe,WAAiBjG,GAErCI,cAAe,SAAAJ,GAAI,OACdiG,EAAe,WAAiBjG,GAErCK,YAAa,SAAAL,GAAI,OAAKiG,EAAe,SAAejG,QCzFzDoG,MARf,WACI,OACI,yBAAKvF,UAAU,OACX,kBAAC,EAAD,QCHZwF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7ca0ed3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// function validation(values) {\n//     const errors = {};\n//     const emailPattern = /(.+)@(.+){2,}\\.(.+){2,}/;\n//     if (!emailPattern.test(values.email)) {\n//       errors.email = 'Enter a valid email';\n//     }\n  \n//     return errors;\n//   }\nclass CForm extends Component {\n    constructor(props) {\n        super(props);\n   \n        const currentYear = new Date().getFullYear();\n        this.state = {\n            fields: {\n                cardNumber: '',\n                name:'',\n                email: '',\n                message: ''\n              },\n              errors: {},\n              disabled : false,\n        showMyComponentcridit:true,\n          showMyComponent:true,\n            cardNumber: '',\n            cardMonth: '',\n            cardYear: '',\n            monthsArr: Array.from(new Array(12), (x, i) => {\n                const month = i + 1;\n                return month <= 9 ? '0' + month : month;\n            }),\n            yearsArr: Array.from(new Array(9), (x, i) => currentYear + i)\n        };\n    }\n    handleValidation(){\n        let f=this.state.cardNumber;\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n //qi validation\n        if(!fields[\"name\"]){\n           formIsValid = false;\n           errors[\"name\"] = \"Name field cannot be empty\";\n        }\n \n        if(typeof fields[\"name\"] !== \"undefined\" && !fields[\"name\"] === false){\n        //    if(!fields[\"name\"].match(/077[0-9]{8}/)){\n            if((fields[\"name\"].length)>15){\n              formIsValid = false;\n              errors[\"name\"] = \"رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n           }\n\n\n           if(!fields[\"name\"].match(/633[1-5]/)){\n            formIsValid = false;\n            errors[\"name\"] = \"رجاءا ادخلرقما صحيحا متكون من 5 رقم  \";\n         }\n\n\n         if(!fields[\"name\"].match(/633[1-5]/) && (fields[\"name\"].length)>15){\n            formIsValid = false;\n            errors[\"name\"] = \" او 5 رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n         }\n\n\n         \nif(!fields[\"cardNumber\"]){\n    alert(\"ko\")\n           formIsValid = false;\n           errors[\"cardNumber\"] = \"Name field cannot be empty\";\n        }\n \n        if(typeof fields[\"cardNumber\"] !== \"undefined\" && !fields[\"cardNumber\"] === false){\n              alert(\"ko\")\n        //    if(!fields[\"name\"].match(/077[0-9]{8}/)){\n            if((fields[\"cardNumber\"].length)>15){\n              formIsValid = false;\n              errors[\"cardNumber\"] = \"رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n           }\n\n\n           if(!fields[\"cardNumber\"].match(/633[1-5]/)){\n            formIsValid = false;\n            errors[\"cardNumber\"] = \"رجاءا ادخلرقما صحيحا متكون من 5 رقم  \";\n         }\n\n\n         if(!fields[\"cardNumber\"].match(/633[1-5]/) && (fields[\"cardNumber\"].length)>15){\n            formIsValid = false;\n            errors[\"cardNumber\"] = \" او 5 رجاءا ادخلرقما صحيحا متكون من 15 رقم  \";\n         }\n\n\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n\n\n\n\n\n\n\n\n\n        }\n \n        if(!fields[\"email\"]){\n           formIsValid = false;\n           errors[\"email\"] = \"Email field cannot be empty\";\n        }\n \n        if(typeof fields[\"email\"] !== \"undefined\" && !fields[\"email\"] === false){\n           let lastAtPos = fields[\"email\"].lastIndexOf('@');\n           let lastDotPos = fields[\"email\"].lastIndexOf('.');\n \n           if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\n              formIsValid = false;\n              errors[\"email\"] = \"Email is not valid\";\n            }\n       }\n \n       if(!fields[\"message\"]){\n          formIsValid = false;\n          errors[\"message\"] = \" Message field cannot be empty\";\n       }\n \n       this.setState({errors: errors});\n       return formIsValid;\n   }\n \n   handleChange(field, e){\n       let fields = this.state.fields;\n       fields[field] = e.target.value;\n       this.setState({fields});\n   }\n \n   handleSubmit(e){\n       e.preventDefault();\n       if(this.handleValidation()){\n           console.log('validation successful')\n         }else{\n           console.log('validation failed')\n         }\n   }\n    updateMainState = (name, value) => {\n        this.props.onUpdateStateValue({\n            name,\n            value\n        });\n    };\n\n    handleFormChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({ [name]: value });\n        this.updateMainState(name, value);\n    };\n\n    replaceMissingChars = cardNumber => {\n        let cardNumberTmp = '#### #### #### ####';\n        cardNumberTmp = cardNumberTmp.split('');\n        let cardNumberArr = cardNumber.split('');\n\n        let maskedCardNumber = [];\n        cardNumberTmp.forEach((val, index) => {\n            cardNumberArr[index]\n                ? maskedCardNumber.push(cardNumberArr[index])\n                : maskedCardNumber.push(val);\n        });\n\n        return maskedCardNumber.join('');\n    };\n    onChange(e) {\n        let date = new Date(Date.parse(e.target.value));\n        \n        if (0 > 0) {\n          e.target.setCustomValidity(\"Please select a date in the past.\"); \n        } else {\n          e.target.setCustomValidity(\"uuu\");\n        }\n      }\n    onCardNumberChange = event => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        this.setState({ [name]: cardNumber.trimRight() });\n        this.updateMainState(name, cardNumber);\n    };\n\n    onCvvFocus = event => {\n        this.updateMainState('isCardFlipped', true);\n    };\n\n    onCvvBlur = event => {\n        this.updateMainState('isCardFlipped', false);\n    };\n   onQiClick = event => {\n        this.updateMainState('showMyComponent', true);\n    };\n    onCriditClick = event => {\n        this.updateMainState('showMyComponentcridit', true);\n    };\n\n    getSnapshotBeforeUpdate() {\n      return this.props.cardNumberRef.current.selectionStart;\n    }\n\n    componentDidUpdate(prevProps, prevState, cursorIdx) {\n      const node = this.props.cardNumberRef.current;\n      const { cardNumber: cardNum } = this.state;\n      const { cardNumber: prevCardNum } = prevState;\n      if (\n        cardNum.length > prevCardNum.length &&\n        cardNum[cursorIdx - 1] === \" \"\n      ) {\n        cursorIdx += 1;\n      } else if (prevCardNum[cursorIdx - 1] === \" \") {\n        cursorIdx -= 1;\n      }\n      node.selectionStart = node.selectionEnd = cursorIdx;\n    }\n\n    render() {\n\n        const { cardMonth, cardYear, monthsArr, yearsArr } = this.state;\n        const {\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef,\n            cardCvvRef,\n            onCardInputFocus,\n            onCardInputBlur\n        } = this.props;\n        return (\n\n\n\n\n            <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n            <div className=\"card-form\">\n        \n                <div id=\"cars\"className=\"card-list\">{this.props.children}</div>\n                <div className=\"card-form__inner\" id=\"card-form__inner\">\n                <h3>\n                QiPay gateway \n            </h3>\n                <h6>\n                All transactions are secure and encrypted\n            </h6>\n<div className=\"card-header\">\n\n\n<input type=\"radio\" id=\"inputy\"  type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" \nonClick={()=>{\n\n    this.setState({ showMyComponent: true });\n    this.updateMainState('showMyComponent', true);\n    this.setState({ showMyComponentcridit: false });\n    this.updateMainState('showMyComponent', true);\n    this.updateMainState('showMyComponentcridit', false);\n\n}}\n   \n                                   /> \n                                     <label className=\"form-check-label\" for=\"exampleRadios1\">CriditCard</label>\n\n        <text>\n                                   {/* CriditCart */}\n                                   </text>\n\n                          <div className=\"imgs\">\n                          <img className=\"u2\"\nsrc={process.env.PUBLIC_URL + '/yuyu.png'}\n                                      alt=\"\"\n                                   /> \n<img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/visa.png'}\n                                      alt=\"\"\n                                   /> \n\n{/* <img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/amex.png'}\n                                      alt=\"\"\n                                   /> */}\n                              </div>         \n\n                           \n\n  \n  </div>\n \n  <div   id=\"all\" style={this.state.showMyComponent ? {} : { display: 'none' }} >\n\n                    <div className=\"card-input\">\n                        <label\n                            htmlFor=\"cardNumber\"\n                            className=\"card-input__label\"\n                        >\n                            Card Number\n                        </label>\n                       \n \n            \n                  \n                  \n                        <input\n                 id=\"cardnumber\"\n                            type=\"tel\"\n                            name=\"cardNumber\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            onChange={this.onCardNumberChange\n                              \n                            }\n                        onInput={this.handleChange.bind(this, \"cardNumber\")}\n                            \n                            maxLength=\"19\"\n                            ref={cardNumberRef}\n                            \n                            onFocus={e => onCardInputFocus(e, 'cardNumber')}\n                            onBlur={onCardInputBlur}\n                            value={this.state.cardNumber}\n                        />\n                            <span style={{color: \"red\"}}>{this.state.errors[\"name\"]}</span>\n                   </div>\n\n                    <div className=\"card-input\">\n                        <label htmlFor=\"cardName\" className=\"card-input__label\">\n                           Name on card\n                        </label>\n                        <input\n                           id=\"cardname\"\n                            type=\"text\"\n                            className=\"card-input__input\"\n                            autoComplete=\"off\"\n                            name=\"cardHolder\"\n                            onChange={this.handleFormChange}\n                            ref={cardHolderRef}\n                            onFocus={e => onCardInputFocus(e, 'cardHolder')}\n                            onBlur={onCardInputBlur}\n                        />\n                    </div>\n\n                    <div className=\"card-form__row\">\n                        <div className=\"card-form__col\">\n                            <div className=\"card-form__group\">\n                                <label\n                                    htmlFor=\"cardMonth\"\n                                    className=\"card-input__label\"\n                                >\n                                    Expiration Date\n                                </label>\n                                <select\n                                    className=\"card-input__input -select\"\n                                    value={cardMonth}\n                                    name=\"cardMonth\"\n                                    onChange={this.handleFormChange}\n                                    ref={cardDateRef}\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled>\n                                        Month\n                                    </option>\n\n                                    {monthsArr.map((val, index) => (\n                                        <option key={index} value={val}>\n                                            {val}\n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"cardYear\"\n                                    className=\"card-input__input -select\"\n                                    value={cardYear}\n                                    onChange={this.handleFormChange}\n                                    onFocus={e =>\n                                        onCardInputFocus(e, 'cardDate')\n                                    }\n                                    onBlur={onCardInputBlur}\n                                >\n                                    <option value=\"\" disabled>\n                                        Year\n                                    </option>\n\n                                    {yearsArr.map((val, index) => (\n                                        <option key={index} value={val}>\n                                            {val}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"card-form__col -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    CVV\n                                </label>\n                           \n                                <input\n                                  id=\"cvv\"\n                                    type=\"tel\"\n                                    className=\"card-input__input\"\n                                    maxLength=\"4\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"card-header\" id=\"lo\">\n\n{/* <input type=\"radio\" className=\"u\"\n      src={process.env.PUBLIC_URL + '/circlr.png'}\n                                      alt=\"\"\n                                      onClick={()=>{ */}\n\n<input \n\n\n\nid=\"inputy\" type=\"radio\"  name=\"exampleRadios\" className=\"radio\" id=\"exampleRadios2\" value=\"option2\"\n  \n                                      alt=\"\"\n                                      onClick={()=>{\nthis.setState({ showMyComponent: false });\nthis.updateMainState('showMyComponent', false);\nthis.setState({ showMyComponentcridit: true });\nthis.updateMainState('showMyComponentcridit', true);\n\n                                        this.updateMainState('isCardFlipped', true);\n                                    }}\n                                   /> \n  <label class=\"form-check-label\" for=\"exampleRadios2\">\n  QiCard                     \n  </label>\n\n        <text>\n                                   {/* QiCard */}\n                                   </text>\n\n                          <div className=\"imgsy\">\n                          <img className=\"u2y\"\nsrc={process.env.PUBLIC_URL + '/qic.jpg'}\n                                      alt=\"\"\n                                   /> \n{/* <img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/visa.png'}\n                                      alt=\"\"\n                                   /> \n\n<img className=\"u2\"\n                                   src={process.env.PUBLIC_URL + '/amex.png'}\n                                      alt=\"\"\n                                   /> */}\n                              </div>         \n\n                           \n\n  \n  </div>\n\n\n  <div id=\"Qicard\" style={this.state.showMyComponentcridit ? {} : { display: 'none' }} >\n\n                   \n  \n                        <div className=\"card-form -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    Card Number\n                                </label>\n                                <input type=\"text\" placeholder=\"Enter Name\" \n                                  id=\"cvv h\"\n                                  type=\"tel\"\n                                  className=\"card-input__input name\"\n                                //   maxLength=\"4\"\n                                  autoComplete=\"off\"\n                                  name=\"cardCvv\"\n                                  onChange={this.handleFormChange,\n                                    this.handleChange.bind(this, \"name\")}\n                                  onFocus={this.onCvvFocus}\n                                  onBlur={this.onCvvBlur}\n                                  ref={cardCvvRef}\n                                \n                                \n                                value={this.state.fields[\"name\"]}/>\n                <span style={{color: \"red\"}}>{this.state.errors[\"name\"]}</span>\n                                {/* <input\n                                onChange={this.handleChange.bind(this, \"name\")} value={this.state.fields[\"name\"]}\n                                onTouchMove={this.handleSubmit.bind(this)}\n                                  id=\"cvv h\"\n                                    type=\"tel\"\n                                    className=\"card-input__input name\"\n                                    maxLength=\"4\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                /> */}\n\n                            </div>\n                        </div>\n                  \n                        <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n          <div className=\"row\">\n            <div className=\"col-25\">\n                <label htmlFor=\"name\">Name</label>\n            </div>\n            {/* <div className=\"col-75\">\n                <input type=\"text\" placeholder=\"Enter Name\" onChange={this.handleChange.bind(this, \"name\")} value={this.state.fields[\"name\"]}/>\n                <span style={{color: \"red\"}}>{this.state.errors[\"name\"]}</span>\n            </div> */}\n          </div>\n          <div className=\"row\">\n            <div className=\"col-25\">\n              <label htmlFor=\"exampleInputEmail1\">Email address</label>\n            </div>\n            <div className=\"col-75\">\n                <input type=\"email\" placeholder=\"Enter Email\" refs=\"email\" aria-describedby=\"emailHelp\" onChange={this.handleChange.bind(this, \"email\")} value={this.state.fields[\"email\"]}/>\n                <span style={{color: \"red\"}}>{this.state.errors[\"email\"]}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-25\">\n                <label htmlFor=\"message\">Message</label>\n            </div>\n            <div className=\"col-75\">\n                <textarea type=\"text\" placeholder=\"Enter Message\" rows=\"5\" refs=\"message\" onChange={this.handleChange.bind(this, \"message\")} value={this.state.fields[\"message\"]}></textarea>\n                <span style={{color: \"red\"}}>{this.state.errors[\"message\"]}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n          <button type=\"submit\" className=\"btn btn-outline-warning paybtn\" disabled={this.state.disabled}>{this.state.disabled ? 'Sending...' : 'Send'}</button>\n\n           \n          </div>\n      </form>\n\n\n\n                        <div className=\"card-form__col -cvv\">\n                            <div className=\"card-input\">\n                                <label\n                                    htmlFor=\"cardCvv\"\n                                    className=\"card-input__label\"\n                                >\n                                    PIN\n                                </label>\n                           \n                                <input\n                                  id=\"cvv\"\n                                    type=\"tel\"\n                                    className=\"card-input__input\"\n                                    maxLength=\"4\"\n                                    autoComplete=\"off\"\n                                    name=\"cardCvv\"\n                                    onChange={this.handleFormChange}\n                                    onFocus={this.onCvvFocus}\n                                    onBlur={this.onCvvBlur}\n                                    ref={cardCvvRef}\n                                />\n                            </div>\n                        </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              \n\n                   \n                   \n                    </div>\n                </div>\n            \n            </div>\n            </form>\n        );\n\n\n        \n    }\n}\n\nexport default CForm;\n","import React, { Component } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    // amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n\n    qi: '633',\n    // discover: '^6011',\n    // unionpay: '^62',\n    // troy: '^9792',\n};\n\nclass Card extends Component {\n    constructor() {\n        super();\n\n        const backgroundImgname = this.cardBackgroundName();\n        this.state = {\n            style: {},\n            counter: 0,\n            backgroundImgname: backgroundImgname\n        };\n    }\n\n    cardType = () => {\n        const number = this.props.cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'undefine'; // default type\n    };\n\n    cardBackgroundName = () => {\n        let random = Math.floor(Math.random() * 25 + 1);\n        return `${random}.jpeg`;\n    };\n\n    removeEmptySpaces = cardNumber => {\n        return cardNumber.replace(/\\s+/g, '');\n    };\n\n    shouldMaskNumber = (cardNumber, index) => {\n        if (cardNumber.length === 15) {\n            return index > 4 && index < 12;\n        } else {\n            return index > 4 && index < 13;\n        }\n    };\n\n    outlineElementStyle = element => element\n        ? {\n            width: `${element.offsetWidth}px`,\n            height: `${element.offsetHeight}px`,\n            transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n        }\n        : null;\n\n    componentDidUpdate(prevProps) {\n        const { currentFocusedElm } = this.props;\n        if (\n            currentFocusedElm &&\n            currentFocusedElm !== prevProps.currentFocusedElm\n        ) {\n            const style = this.outlineElementStyle(currentFocusedElm);\n            this.setState({ style });\n        }\n    }\n\n    maskCardNumber(cardNumber) {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    }\n\n    render() {\n        let {\n            cardHolder,\n            cardNumber,\n            cardMonth,\n            cardYear,\n            cardCvv,\n            isCardFlipped,\n            currentFocusedElm,\n            onCardElementClick,\n            cardNumberRef,\n            cardHolderRef,\n            cardDateRef\n        } = this.props;\n\n        const cardHolderArr = cardHolder.split('');\n        const cardNumberArr = this.maskCardNumber(cardNumber);\n        cardCvv = cardCvv.split('');\n\n        return (\n            \n            <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n                <div className=\"card-item__side -front\">\n                    <div\n                        className={`card-item__focus ${\n                            currentFocusedElm ? `-active` : ``\n                        }`}\n                        style={this.state.style}\n                    />\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n\n                    <div className=\"card-item__wrapper\">\n                        <div className=\"card-item__top\">\n                            <img\n                                src={process.env.PUBLIC_URL + '/chip.png'}\n                                alt=\"\"\n                                className=\"card-item__chip\"\n                            />\n                            <div className=\"card-item__type\">\n                                <img\n                                    alt={this.cardType()}\n                                    src={\n                                        process.env.PUBLIC_URL +\n                                        `/card-type/${this.cardType()}.png`\n                                    }\n                                    className=\"card-item__typeImg\"\n                                />\n                            </div>\n                        </div>\n\n                        <label\n                            className=\"card-item__number\"\n                            ref={cardNumberRef}\n                            onClick={() => onCardElementClick('cardNumber')}\n                        >\n                            <TransitionGroup\n                                className=\"slide-fade-up\"\n                                component=\"div\"\n                            >\n                                {cardNumber ? (\n                                    cardNumberArr.map((val, index) => (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                            key={index}\n                                        >\n                                            <div className=\"card-item__numberItem\">\n                                                {val}\n                                            </div>\n                                        </CSSTransition>\n                                    ))\n                                ) : (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            #\n                                        </div>\n                                    </CSSTransition>\n                                )}\n                            </TransitionGroup>\n                        </label>\n                        <div className=\"card-item__content\">\n                            <label\n                                className=\"card-item__info\"\n                                onClick={() => onCardElementClick('cardHolder')}\n                                ref={cardHolderRef}\n                            >\n                                <div className=\"card-item__holder\">\n                                    Card Holder\n                                </div>\n                                <div className=\"card-item__name\">\n                                    <TransitionGroup\n                                        className=\"slide-fade-up\"\n                                        component=\"div\"\n                                    >\n                                        {cardHolder === 'FULL NAME' ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                            >\n                                                <div>FULL NAME</div>\n                                            </CSSTransition>\n                                        ) : (\n                                            cardHolderArr.map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                        )}\n                                    </TransitionGroup>\n                                </div>\n                            </label>\n                            <div\n                                className=\"card-item__date\"\n                                onClick={() => onCardElementClick('cardDate')}\n                                ref={cardDateRef}\n                            >\n                                <label className=\"card-item__dateTitle\">\n                                    Expires\n                                </label>\n                                <label className=\"card-item__dateItem\">\n                                    <SwitchTransition in-out>\n                                        {!cardMonth ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>MM</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardMonth}\n                                            >\n                                                <span>{cardMonth}</span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                                /\n                                <label\n                                    htmlFor=\"cardYear\"\n                                    className=\"card-item__dateItem\"\n                                >\n                                    <SwitchTransition out-in>\n                                        {!cardYear ? (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>YY</span>\n                                            </CSSTransition>\n                                        ) : (\n                                            <CSSTransition\n                                                classNames=\"slide-fade-up\"\n                                                timeout={250}\n                                                key={cardYear}\n                                            >\n                                                <span>\n                                                    {cardYear\n                                                        .toString()\n                                                        .substr(-2)}\n                                                </span>\n                                            </CSSTransition>\n                                        )}\n                                    </SwitchTransition>\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"card-item__side -back\">\n                    <div className=\"card-item__cover\">\n                        <img\n                            alt=\"\"\n                            src={\n                                process.env.PUBLIC_URL +\n                                `/card-background/${this.state.backgroundImgname}`\n                            }\n                            className=\"card-item__bg\"\n                        />\n                    </div>\n                    <div className=\"card-item__band\"/>\n                    <div className=\"card-item__cvv\">\n                        <div className=\"card-item__cvvTitle\">CVV</div>\n                        <div className=\"card-item__cvvBand\">\n                            {cardCvv.map((val, index) => (\n                                <span key={index}>*</span>\n                            ))}\n                        </div>\n                        <div className=\"card-item__type\">\n                            <img\n                                alt=\"card-type\"\n                                src={\n                                    process.env.PUBLIC_URL +\n                                    '/card-type/visa.png'\n                                }\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { useState, useRef } from 'react';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst defaultCardNo = '#### #### #### ####';\nconst defaultCardHolderName = 'FULL NAME';\nconst defaultCardMonth = '';\nconst defaultCardYear = '';\nconst defaultCardCvv = '';\n\nconst MainScreen = () => {\n    const initialState = {\n        cardNumber: defaultCardNo,\n        cardHolder: defaultCardHolderName,\n        cardMonth: defaultCardMonth,\n        cardYear: defaultCardYear,\n        cardCvv: defaultCardCvv,\n        isCardFlipped: false,\n        currentFocusedElm: null\n    };\n    const [state, setState] = useState(initialState);\n\n    const updateStateValue = ({ name, value }) => {\n        setState({\n            ...state,\n            [name]: value || initialState[name]\n        });\n    };\n\n    const {\n        cardNumber,\n        cardHolder,\n        cardMonth,\n        cardYear,\n        cardCvv,\n        isCardFlipped\n    } = state;\n    let { currentFocusedElm } = state;\n\n    // References for the Form Inputs\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let onCardElementClick = key => {\n        focusFormFieldByKey(key);\n    };\n\n    let focusFormFieldByKey = key => {\n        formFieldsRefObj[key].current.focus();\n    };\n\n    // This are the references for the Card DIV elements\n    let cardElementsRef = {\n        cardNumber: null,\n        cardHolder: null,\n        cardDate: null\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        setState({\n            ...state,\n            currentFocusedElm: cardElementsRef[inputName]\n        });\n    };\n\n    let onCardInputBlur = event => {\n        setState({\n            ...state,\n            currentFocusedElm: null\n        });\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <CForm\n                onUpdateStateValue={updateStateValue}\n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}\n            >\n                <Card\n                    cardNumber={cardNumber}\n                    cardHolder={cardHolder}\n                    cardMonth={cardMonth}\n                    cardYear={cardYear}\n                    cardCvv={cardCvv}\n                    isCardFlipped={isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={onCardElementClick}\n                    cardNumberRef={node =>\n                        (cardElementsRef['cardNumber'] = node)\n                    }\n                    cardHolderRef={node =>\n                        (cardElementsRef['cardHolder'] = node)\n                    }\n                    cardDateRef={node => (cardElementsRef['cardDate'] = node)}\n                ></Card>\n            </CForm>\n        </div>\n    );\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\nimport MainScreen from './screens/MainScreen';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MainScreen />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}